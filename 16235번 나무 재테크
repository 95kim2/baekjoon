[16235번: 나무재테크](https://www.acmicpc.net/problem/16235).


[문제풀이]
1)시간제한이 짧아서 처음 생각했던 방식을 고수할지 말지 망설였으나 별다른 좋은 수가 생각나지 않아서 그냥 진행했다.
나무들이 자라야 할 땅을 trees[][]의 2차원배열로 생각했고, 나무들이 칸당 여러개 존재할 수 있어서 배열의 원소를 vector<int>로 잡았다.
(<int>는 나무의 나이를 저장하기 위해 선택)
feed[][]는 봄에 나무가 먹어야 할 양분을 저장하기 위한 2차원 배열이고 add[][]는 겨울에 feed[][]에 추가해줄 양분을 저장하는 배열이다.
visit[][]은 가을에 나무가 번식할 때 땅의 범위를 초과하는지 판단하기 위한 변수이다.  
if(0<=row<N && 0<=col<N)을 써줘도 되지만 지저분해 보여서 굳이 visit[][]을 추가했다.

2)봄 : 나무가 나이만큼 양분을 먹으면 살고 나이가 증가하며 못 먹으면 즉시 죽는다. 항상 어린 나무부터 먹어야 한다.
  - 항상 어린 나무가 먹어야 한다는 점 때문에 처음에 vector<int>[][]대신 priority_queue로 잡았었다. 
  그러나 인덱스 접근이 없다는 점이 오히려 더 복잡해져서 vector<int>로 바꾸었다. 
  대신 항상 어린 나무부터 먹을 수 있도록 algorithm 헤더의 sort를 사용했다.
  
  - 벡터가 어린 나무로 정렬되었기에 순차적으로 벡터를 탐색하다가 남아있는 양분이 현재 탐색중인 벡터의 나무 나이보다 적다면 나머지 뒤에 나무도 못먹는다. 
  따라서 탐색 중 못 먹는 나무가 나오면 그 즉시 탐색을 중단하고 못먹은 나무들을 뒤에서부터 양분으로 추가하면서 벡터에서 제거해줬다.
  (이 부분은 여름에 해당하는 기능이다. 즉 여름을 봄과 합쳐서 구현했다.)

3)여름 : 봄에 양분을 못 먹고 죽은 녀석들은 자신 나이의 반(소수점 버림)만큼 양분으로 돌아간다.
- 이 부분은 봄을 구현할 때 합쳐서 구현했다. 

4)가을 : 나이가 5의 배수인 나무들은 자신이 있는 칸을 둘러싼 8개의 칸에 번식한다. (땅의 범위는 초과하지 못한다.)
- 별거 없다. 이중 for문으로 땅의 각 칸마다 살아 있는 나무가 있다면 해당 칸의 나무를 탐색해서 나이가 5의 배수인 것의 개수만큼 주변 8칸에 나이 1인 나무를 추가해주면 된다.

5)겨울 : 양분을 추가해준다. (feed[][] += add[][])
    - 위 식이 전부다.



<dir>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;



int N, M, K;
int add[12][12], feed[12][12], visit[12][12];
int dx[8] = {-1, -1, 0, 1, 1, 1, 0, -1}, dy[8] = {0, 1, 1, 1, 0, -1, -1, -1};
vector<int> trees[12][12];

void input() {
    cin >> N >> M >> K;
    for (int i = 0; i <= N+1; i++) {
        visit[i][0] = -1;
        visit[i][N+1] = -1;
        visit[0][i] = -1;
        visit[N+1][i] = -1;
    }
    for (int i = 1; i <= N; i++) {
        for (int j = 1; j <= N; j++) {
            feed[i][j] = 5;
            visit[i][j] = 0;
            cin >> add[i][j];
        }
    }
    for (int x,y,z,i = 0; i < M; i++) {
        cin >> x >> y >> z;
        trees[x][y].push_back(z);
    }
}

void output() {
    int cnt = 0;
    for (int i = 1; i <= N; i++) {
        for (int j = 1; j <= N; j++) {
            cnt+=trees[i][j].size();
        }
    }
    printf("%d\n", cnt);
}

void springSummer() {
    for (int i = 1; i <= N; i++) {
        for (int j = 1; j <= N; j++) {
            int SIZE = (int)trees[i][j].size();
            if (SIZE == 0) continue;
            sort(trees[i][j].begin(), trees[i][j].end());
            int t, deadCount = SIZE;
            for (t = 0; t < SIZE; t++) {
                if (feed[i][j] >= trees[i][j][t]) {
                    feed[i][j]-=trees[i][j][t];
                    trees[i][j][t]++;
                    deadCount--;
                }
                else {
                    break;
                }
            }
            for (int k = 0; k < deadCount; k++) {
                feed[i][j] += trees[i][j].back()/2;
                trees[i][j].pop_back();
            }
        }
    }
}


void fall() {
    for (int i = 1; i <= N; i++) {
        for (int j = 1; j <= N; j++) {
            int SIZE = (int)trees[i][j].size();
            for (int v = 0; v < SIZE; v++) {
                if (trees[i][j][v] % 5 != 0) continue;
                for (int x,y,k = 0; k < 8; k++) {
                    x = i+dx[k]; y = j+dy[k];
                    if (visit[x][y]==0) {
                        trees[x][y].push_back(1);
                    }
                }
            }
        }
    }
}

void winter() {
    for (int i = 1; i <= N; i++) {
        for (int j = 1; j<=N; j++) {
            feed[i][j] += add[i][j];
        }
    }
}

void afterKYears() {
    for (int year = 1; year <= K; year++) {
        springSummer();
        fall();
        winter();
    }
}

void finalTreesNum() {
    input();
    afterKYears();
    output();
}

int main(){
    finalTreesNum();
    return 0;
}
</dir>
